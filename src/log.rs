use chrono::Local;
use crate::PppState;

/// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
pub fn log_line(msg: &str) {
    let now = Local::now().format("%H:%M:%S");
    println!("{} {}", now, msg);
}

/// –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ LCP –æ–ø—Ü–∏–∏
pub fn log_send_lcp(id: u8, option_type: u8, data: &[u8]) {
    let hex_str = data.iter().map(|b| format!("{:02X}", b)).collect::<String>();
    log_line(&format!("Send LCP #{} Option={} Data={}", id, option_type, hex_str));
}

/// –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ LCP –æ–ø—Ü–∏–∏
pub fn log_send_ipcp(id: u8, option_type: u8, data: &[u8]) {
    let hex_str = data.iter().map(|b| format!("{:02X}", b)).collect::<String>();
    log_line(&format!("Send IPCP #{} Option={} Data={}", id, option_type, hex_str));
}

/// –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ LCP –æ–ø—Ü–∏–∏
pub fn log_recv_ipcp(id: u8, option_type: u8, data: &[u8]) {
    let hex_str = data.iter().map(|b| format!("{:02X}", b)).collect::<String>();
    log_line(&format!("Received IPCP *{} Option={} Data={}", id, option_type, hex_str));
}

/// –õ–æ–≥ –ø–æ–ª—É—á–µ–Ω–∏—è LCP –æ–ø—Ü–∏–∏
pub fn log_recv_lcp(id: u8, option_type: u8, data: &[u8]) {
    let hex_str = data.iter().map(|b| format!("{:02X}", b)).collect::<String>();
    log_line(&format!("Received LCP *{} Option={} Data={}", id, option_type, hex_str));
}

/// –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞
pub fn log_send(label: &str, packet: &[u8], state: &PppState) {
    log_line(&format!("{} ‚Üí –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({} –±–∞–π—Ç): {:02X?}", label, packet.len(), packet));
    log_line(&format!("üß≠ FSM ‚Üí {:?}", state));
}