use uuid::Uuid;
use crate::parser::parse_ppp_frame;
use crate::parser::PppParsedFrame;

pub fn build_sstp_hello(correlation_id: Uuid) -> Vec<u8> {
    let mut hello = vec![
        0x10, 0x01,       // Version (1.0) + Control Bit
        0x00, 0x0E,       // Length = 14 bytes
        0x00, 0x01,       // Message Type = Call Connect Request
        0x00, 0x01,       // Attribute Count = 1
        // AVP 1: Encapsulated Protocol
        0x01, 0x00,       // Attribute ID + Reserved
        0x00, 0x06,       // Attribute Length = 6
        0x00, 0x01        // Value = PPP
    ];

    println!("üì¶ Minimal SSTP Hello –¥–ª–∏–Ω–∞: {} –±–∞–π—Ç", hello.len());
    hello
}

pub fn parse_sstp_control_packet(buf: &[u8]) {
    if buf.len() >= 6 && buf[0] == 0x10 && buf[1] == 0x01 {
        let length = u16::from_be_bytes([buf[2], buf[3]]);
        let message_type = u16::from_be_bytes([buf[4], buf[5]]);
        println!("üß© SSTP Message: –¥–ª–∏–Ω–∞ = {}, —Ç–∏–ø = 0x{:04X}", length, message_type);

        match message_type {
            0x0001 => println!("üì® Call Connect Request (–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)"),
            0x0002 => println!("‚úÖ –ü–æ–ª—É—á–µ–Ω Call Connect ACK ‚Äî —Å–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª Hello"),
            0x0003 => println!("üéâ –ü–æ–ª—É—á–µ–Ω Call Connected ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≥–æ—Ç–æ–≤ –∫ PPP"),
            0x0004 => println!("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω Call Abort ‚Äî –∞–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"),
            0x0005 => println!("‚õî –ü–æ–ª—É—á–µ–Ω Call Disconnect ‚Äî —Å–µ—Ä–≤–µ—Ä —Å–±—Ä–æ—Å–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"),
            0x0006 => println!("üîÑ Echo Request"),
            0x0007 => println!("üì° Echo Response"),
            0x0008 => println!("üîß Set PPP Discriminator"),
            other => println!("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: 0x{:04X}", other),
        }
    } else {
        println!("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ SSTP Control Packet.");
    }
}

pub fn parse_sstp_data_packet(buf: &[u8]) -> Option<PppParsedFrame> {
    if let Some(ppp) = parse_ppp_frame(buf) {
        println!("üì¶ SSTP Data Packet: –¥–ª–∏–Ω–∞ = {}", buf.len());
        println!("üîó PPP Protocol: 0x{:04X}", ppp.protocol);
        println!("üîó PPP Code: 0x{:04X}", ppp.code);

        let code_str = match ppp.code {
            1 => "Configure-Request",
            2 => "Configure-Ack",
            3 => "Configure-Nak",
            4 => "Configure-Reject",
            5 => "Terminate-Request",
            6 => "Terminate-Ack",
            9 => "Echo-Request",
            10 => "Echo-Reply",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        };

        println!(
            "üì® PPP Frame: Code = {} ({}), ID = {}, Length = {}",
            ppp.code, code_str, ppp.id, ppp.length
        );
        Some(ppp)
    } else {
        println!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å SSTP Data Packet –∫–∞–∫ PPP.");
        return None;
    }
}

pub fn build_configure_ack(reply_id: u8, options: &[u8]) -> Vec<u8> {
    let mut ppp = vec![
        0xFF, 0x03,
        0xC0, 0x21,
        0x02,
        reply_id,
    ];

    let length = (options.len() + 4) as u16;
    ppp.push((length >> 8) as u8);
    ppp.push((length & 0xFF) as u8);
    ppp.extend_from_slice(options);

    let total_len = ppp.len() + 4;
    let mut sstp = vec![
        0x10, 0x00,
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];
    sstp.extend_from_slice(&ppp);
    sstp
}

    pub fn build_lcp_configure_request() -> Vec<u8> {
        let options = vec![
            0x05, 0x06, 0xC2, 0x23 // CHAP only, no algorithm
        ];

        let mut ppp = vec![
            0xFF, 0x03,
            0xC0, 0x21,
            0x01,             // Code = Configure-Request
            0x01,             // ID
        ];

        let length = (options.len() + 4) as u16;
        ppp.push((length >> 8) as u8);
        ppp.push((length & 0xFF) as u8);
        ppp.extend_from_slice(&options);

        let total_len = ppp.len() + 4;
        let mut sstp = vec![
            0x10, 0x00,
            (total_len >> 8) as u8,
            (total_len & 0xFF) as u8,
        ];
        sstp.extend_from_slice(&ppp);
        sstp
    }


pub fn build_configure_ack_from_request(request: &[u8]) -> Option<Vec<u8>> {
    const SSTP_HEADER_LEN: usize = 4;
    const PPP_HEADER_LEN: usize = 2 + 2; // Address/Control + Protocol
    const PPP_LCP_HEADER_LEN: usize = 4; // Code, ID, Length

    // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —á—Ç–æ–±—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º Configure-Request
    if request.len() < SSTP_HEADER_LEN + PPP_HEADER_LEN + PPP_LCP_HEADER_LEN {
        println!("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π SSTP –ø–∞–∫–µ—Ç –¥–ª—è LCP.");
        return None;
    }

    // –°–º–µ—â–∞–µ–º—Å—è –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–∞ PPP (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ SSTP –∏ LCP)
    let ppp_start = SSTP_HEADER_LEN + PPP_HEADER_LEN;

    // –ß–∏—Ç–∞–µ–º –∫–æ–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0x01 –¥–ª—è Configure-Request)
    let code = request[ppp_start];
    let id = request[ppp_start + 1];
    let length = u16::from_be_bytes([request[ppp_start + 2], request[ppp_start + 3]]) as usize;

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Configure-Request, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    if code != 0x01 {
        println!("‚ö†Ô∏è –≠—Ç–æ –Ω–µ Configure-Request (code = 0x{:02X})", code);
        return None;
    }

    let expected_total_len = ppp_start + length;
    if request.len() < expected_total_len {
        println!("‚ùå –ü–∞–∫–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–ø—Ü–∏–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ Length.");
        return None;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–ø—Ü–∏–∏) –∏–∑ –ø–∞–∫–µ—Ç–∞
    let options = &request[ppp_start + 4..expected_total_len];

    // –°—Ç—Ä–æ–∏–º Configure-Ack —Å —Ç–µ–º –∂–µ ID –∏ —Ç–µ–º–∏ –∂–µ –æ–ø—Ü–∏—è–º–∏
    let mut ppp = vec![
        0xFF, 0x03,       // Address + Control
        0xC0, 0x21,       // LCP Protocol
        0x02,             // Code = Configure-Ack
        id,               // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    let ack_length = (options.len() + 4) as u16;
    ppp.push((ack_length >> 8) as u8);  // –î–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞ (—Å—Ç–∞—Ä—à–∏–π –±–∞–π—Ç)
    ppp.push((ack_length & 0xFF) as u8);  // –î–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞ (–º–ª–∞–¥—à–∏–π –±–∞–π—Ç)
    ppp.extend_from_slice(options);

    // –°—Ç—Ä–æ–∏–º SSTP –ø–∞–∫–µ—Ç
    let total_len = ppp.len() + 4;  // –î–æ–±–∞–≤–ª—è–µ–º SSTP –∑–∞–≥–æ–ª–æ–≤–æ–∫
    let mut sstp = vec![
        0x10, 0x00, // –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è SSTP (data packet)
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];

    sstp.extend_from_slice(&ppp); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –ø–∞–∫–µ—Ç PPP

    Some(sstp)  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}

pub fn build_configure_nak_from_request(sstp_payload: &[u8]) -> Option<Vec<u8>> {
    const SSTP_HEADER_LEN: usize = 4;
    const PPP_HEADER_LEN: usize = 2 + 2; // Address/Control + Protocol
    const PPP_LCP_HEADER_LEN: usize = 4; // Code, ID, Length

    if sstp_payload.len() < SSTP_HEADER_LEN + PPP_HEADER_LEN + PPP_LCP_HEADER_LEN {
        println!("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π SSTP –ø–∞–∫–µ—Ç –¥–ª—è LCP (Configure-Nak).");
        return None;
    }

    let ppp_start = SSTP_HEADER_LEN + PPP_HEADER_LEN;

    let code = sstp_payload[ppp_start];
    let id = sstp_payload[ppp_start + 1];

    if code != 0x01 {
        println!("‚ö†Ô∏è –≠—Ç–æ –Ω–µ Configure-Request (–æ–∂–∏–¥–∞–ª—Å—è Code 0x01), –∞ 0x{:02X}", code);
        return None;
    }

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º CHAP: Protocol ID = 0xC223, Value = 0x81 (MS-CHAPv2)
    let chap_option: [u8; 5] = [
        0x03,       // Option Type: Authentication Protocol
        0x05,       // Length
        0xC2, 0x23, // CHAP (0xC223)
        0x81        // Algorithm = 0x81 (MS-CHAPv2)
    ];

    let mut ppp = vec![
        0xFF, 0x03,       // Address + Control
        0xC0, 0x21,       // LCP Protocol
        0x03,             // Code = Configure-Nak
        id,               // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID
    ];

    let length = (chap_option.len() + 4) as u16;
    ppp.push((length >> 8) as u8);
    ppp.push((length & 0xFF) as u8);
    ppp.extend_from_slice(&chap_option);

    let total_len = ppp.len() + 4;
    let mut sstp = vec![
        0x10, 0x00,
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];
    sstp.extend_from_slice(&ppp);

    Some(sstp)
}


pub fn is_lcp_configure_request(buf: &[u8]) -> bool {
    buf.len() >= 12 &&
    buf[4] == 0xFF &&
    buf[5] == 0x03 &&
    buf[6] == 0xC0 &&
    buf[7] == 0x21 &&
    buf[8] == 0x01
}

pub fn is_chap_challenge(buf: &[u8]) -> bool {
    buf.len() >= 12 &&
    buf[4] == 0xFF &&
    buf[5] == 0x03 &&
    buf[6] == 0xC2 &&
    buf[7] == 0x23 &&
    buf[8] == 0x01
}

pub fn build_lcp_configure_request_chap_simple() -> Vec<u8> {
    let options = vec![
        0x05, 0x04,       // Option Type = Auth Protocol (0x05), Length = 4
        0xC2, 0x23        // Value = CHAP
    ];

    let mut ppp = vec![
        0xFF, 0x03,
        0xC0, 0x21,
        0x01, // Code = Configure-Request
        0x02, // ID = 2
    ];

    let length = (options.len() + 4) as u16;
    ppp.push((length >> 8) as u8);
    ppp.push((length & 0xFF) as u8);
    ppp.extend_from_slice(&options);

    let total_len = ppp.len() + 4;
    let mut sstp = vec![
        0x10, 0x00,
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];
    sstp.extend_from_slice(&ppp);
    sstp
}


pub fn build_lcp_configure_request_fallback() -> Vec<u8> {

    let options = vec![
        0x05, 0x06, 0xC2, 0x23 // CHAP only, no algorithm
    ];

    let mut ppp = vec![
        0xFF, 0x03,             // Address + Control
        0xC0, 0x21,             // Protocol: LCP
        0x01,                   // Code = Configure-Request
        0x01,                   // Identifier
        0x00, 0x0A              // Length (10 bytes total)
    ];
    ppp.extend_from_slice(&options);

    let total_len = ppp.len() + 4; // SSTP header
    let mut sstp = vec![
        0x10, 0x00,
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];
    sstp.extend_from_slice(&ppp);
    sstp
}

pub fn build_sstp_ppp_lcp_request() -> Vec<u8> {
    let mut buf = Vec::new();

    // ===== SSTP Header =====
    let version: u8 = 0x10; // Version 1.0
    let control_bit: u8 = 0x00; // C = 0 ‚Üí Data packet
    buf.push(version);
    buf.push(control_bit);

    // –ú—ã –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º –¥–ª–∏–Ω—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –≤—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ 0
    buf.extend_from_slice(&[0x00, 0x00]);

    // ===== PPP Frame =====
    buf.push(0xFF); // PPP Address (always 0xFF)
    buf.push(0x03); // PPP Control (always 0x03)
    buf.push(0xC0); // Protocol (0xC021 = LCP)
    buf.push(0x21);

    // LCP Configuration Request
    buf.push(0x01); // Code: Configure-Request
    buf.push(0x01); // Identifier
    buf.extend_from_slice(&[0x00, 0x0C]); // Length = 12 bytes

    // Option: Magic Number
    buf.push(0x05); // Type: Magic Number
    buf.push(0x06); // Length: 6
    buf.extend_from_slice(&[0x00, 0x00, 0x00, 0x01]); // Value: arbitrary magic

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏–Ω—É –ø–∞–∫–µ—Ç–∞ –≤ SSTP –∑–∞–≥–æ–ª–æ–≤–∫–µ (–≤—Å–µ–≥–æ –±–∞–π—Ç)
    let total_len = buf.len() as u16;
    let len_field = (total_len & 0x0FFF) | 0x0000; // R = 0
    buf[2] = (len_field >> 8) as u8;
    buf[3] = (len_field & 0xFF) as u8;

    buf
}