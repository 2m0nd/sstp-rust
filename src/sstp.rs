use rand::Rng;
use tokio::io::AsyncRead;
use tokio::io::AsyncReadExt;
use uuid::Uuid;
use crate::parser::parse_ppp_frame;
use crate::parser::PppParsedFrame;
use std::collections::HashMap;
use std::collections::VecDeque;
use tokio::{net::TcpStream};
use tokio_rustls::TlsConnector;
use tokio_rustls::rustls::{
    Certificate, ClientConfig, Error as TLSError, ServerName,
    client::ServerCertVerifier,
    client::ServerCertVerified,
};
use tokio::{io::{ split, ReadHalf, WriteHalf}};
use tun::{platform::Device as Tun};
use tokio_rustls::client::TlsStream;


pub async fn read_and_parse_all<R: AsyncRead + Unpin>(
    stream: &mut R,
    leftover: &mut Vec<u8>,
    queue: &mut VecDeque<PppParsedFrame>,
) -> std::io::Result<()> {
    use tokio::io::AsyncReadExt;

    // üß™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
    if !leftover.is_empty() {
        let packets = extract_ppp_from_sstp_stream(leftover);
        if packets.is_empty() {
            println!("üì≠ –ù–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö PPP –ø–∞–∫–µ—Ç–æ–≤ (–≤ leftover)");
        }
        queue.extend(packets);
    }

    // üí§ –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ —Å—Ç—Ä–∏–º–∞
    if queue.is_empty() {
        let mut buf = [0u8; 1600];
        let n = stream.read(&mut buf).await?;

        //println!("üîç –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –∏–∑ stream", n);
        //println!("üîç –ë—É—Ñ–µ—Ä: {:02X?}", &buf[..n]);

        if n == 0 {
            return Err(std::io::Error::new(std::io::ErrorKind::UnexpectedEof, "SSTP –∑–∞–∫—Ä—ã–ª—Å—è"));
        }

        leftover.extend_from_slice(&buf[..n]);

        let packets = extract_ppp_from_sstp_stream(leftover);
        if packets.is_empty() {
            println!("üì≠ –ù–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö PPP –ø–∞–∫–µ—Ç–æ–≤ (–∏–∑ read)");
        }
        queue.extend(packets);
    }

    Ok(())
}


pub fn take_matching_packet<F>(
    queue: &mut VecDeque<PppParsedFrame>,
    matcher: F,
) -> Option<PppParsedFrame>
where
    F: Fn(&PppParsedFrame) -> bool,
{
    let index = queue.iter().position(|p| matcher(p))?;
    Some(queue.remove(index).unwrap())
}

/// –î–µ–ª–∏—Ç leftover –Ω–∞ SSTP —Ñ—Ä–µ–π–º—ã –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç PPP –ø–∞–∫–µ—Ç—ã
fn extract_ppp_from_sstp_stream(leftover: &mut Vec<u8>) -> Vec<PppParsedFrame> {
    let mut parsed = Vec::new();
    let mut offset = 0;

    while offset + 4 <= leftover.len() {
        if leftover[offset] != 0x10 {
            println!("‚ö†Ô∏è –ù–µ SSTP —Ñ—Ä–µ–π–º –ø–æ offset={}", offset);
            break;
        }

        let total_len = u16::from_be_bytes([leftover[offset + 2], leftover[offset + 3]]) as usize;
        if offset + total_len > leftover.len() {
            break; // —Ñ—Ä–µ–π–º –Ω–µ–ø–æ–ª–Ω—ã–π, –∂–¥—ë–º
        }

        let sstp_frame = &leftover[offset..offset + total_len];
        if let Some(ppp) = parse_ppp_frame(sstp_frame) {
            parsed.push(ppp);
        }

        offset += total_len;
    }

    // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —á–∞—Å—Ç—å –∏–∑ leftover
    leftover.drain(0..offset);
    parsed
}


fn parse_all_ppp_packets(buf: &mut Vec<u8>) -> Vec<PppParsedFrame> {
    let mut packets = Vec::new();
    let mut i = 0;

    while i + 4 <= buf.len() {
        if buf[i] != 0x10 || buf[i + 1] != 0x00 {
            i += 1;
            continue;
        }

        let total_len = u16::from_be_bytes([buf[i + 2], buf[i + 3]]) as usize;
        if i + total_len > buf.len() {
            break; // –∂–¥—ë–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
        }

        let payload = &buf[i + 4..i + total_len];
        if let Some(ppp) = parse_ppp_frame(payload) {
            packets.push(ppp);
        }

        i += total_len;
    }

    buf.drain(..i); // —É–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
    packets
}


pub fn build_sstp_hello(correlation_id: Uuid) -> Vec<u8> {
    let mut hello = vec![
        0x10, 0x01,       // Version (1.0) + Control Bit
        0x00, 0x0E,       // Length = 14 bytes
        0x00, 0x01,       // Message Type = Call Connect Request
        0x00, 0x01,       // Attribute Count = 1
        // AVP 1: Encapsulated Protocol
        0x01, 0x00,       // Attribute ID + Reserved
        0x00, 0x06,       // Attribute Length = 6
        0x00, 0x01        // Value = PPP
    ];

    println!("üì¶ Minimal SSTP Hello –¥–ª–∏–Ω–∞: {} –±–∞–π—Ç", hello.len());
    hello
}

pub fn parse_sstp_control_packet(buf: &[u8]) {
    if buf.len() >= 6 && buf[0] == 0x10 && buf[1] == 0x01 {
        let length = u16::from_be_bytes([buf[2], buf[3]]);
        let message_type = u16::from_be_bytes([buf[4], buf[5]]);
        println!("üß© SSTP Message: –¥–ª–∏–Ω–∞ = {}, —Ç–∏–ø = 0x{:04X}", length, message_type);

        match message_type {
            0x0001 => println!("üì® Call Connect Request (–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)"),
            0x0002 => println!("‚úÖ –ü–æ–ª—É—á–µ–Ω Call Connect ACK ‚Äî —Å–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª Hello"),
            0x0003 => println!("üéâ –ü–æ–ª—É—á–µ–Ω Call Connected ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≥–æ—Ç–æ–≤ –∫ PPP"),
            0x0004 => println!("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω Call Abort ‚Äî –∞–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"),
            0x0005 => println!("‚õî –ü–æ–ª—É—á–µ–Ω Call Disconnect ‚Äî —Å–µ—Ä–≤–µ—Ä —Å–±—Ä–æ—Å–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"),
            0x0006 => println!("üîÑ Echo Request"),
            0x0007 => println!("üì° Echo Response"),
            0x0008 => println!("üîß Set PPP Discriminator"),
            other => println!("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: 0x{:04X}", other),
        }
    } else {
        println!("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ SSTP Control Packet.");
    }
}

pub fn parse_sstp_data_packet(buf: &[u8]) -> Option<PppParsedFrame> {
    if let Some(ppp) = parse_ppp_frame(buf) {
        // println!("üì¶ SSTP Data Packet: –¥–ª–∏–Ω–∞ = {}", buf.len());
        // println!("üîó PPP Protocol: 0x{:04X}", ppp.protocol);
        // println!("üîó PPP Code: 0x{:04X}", ppp.code);

        let code_str = match ppp.code {
            1 => "Configure-Request",
            2 => "Configure-Ack",
            3 => "Configure-Nak",
            4 => "Configure-Reject",
            5 => "Terminate-Request",
            6 => "Terminate-Ack",
            9 => "Echo-Request",
            10 => "Echo-Reply",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        };

        println!(
            "üì® PPP Frame: Code = {} ({}), ID = {}, Length = {}",
            ppp.code, code_str, ppp.id, ppp.length
        );
        Some(ppp)
    } else {
        println!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å SSTP Data Packet –∫–∞–∫ PPP.");
        return None;
    }
}

pub fn build_configure_ack(reply_id: u8, options: &[u8]) -> Vec<u8> {
    let mut ppp = vec![
        0xFF, 0x03,
        0xC0, 0x21,
        0x02,
        reply_id,
    ];

    let length = (options.len() + 4) as u16;
    ppp.push((length >> 8) as u8);
    ppp.push((length & 0xFF) as u8);
    ppp.extend_from_slice(options);

    let total_len = ppp.len() + 4;
    let mut sstp = vec![
        0x10, 0x00,
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];
    sstp.extend_from_slice(&ppp);
    sstp
}

pub fn build_configure_ack_from_request(request: &[u8]) -> Option<Vec<u8>> {
    const SSTP_HEADER_LEN: usize = 4;
    const PPP_HEADER_LEN: usize = 2 + 2; // Address/Control + Protocol
    const PPP_LCP_HEADER_LEN: usize = 4; // Code, ID, Length

    // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —á—Ç–æ–±—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º Configure-Request
    if request.len() < SSTP_HEADER_LEN + PPP_HEADER_LEN + PPP_LCP_HEADER_LEN {
        println!("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π SSTP –ø–∞–∫–µ—Ç –¥–ª—è LCP.");
        return None;
    }

    // –°–º–µ—â–∞–µ–º—Å—è –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–∞ PPP (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ SSTP –∏ LCP)
    let ppp_start = SSTP_HEADER_LEN + PPP_HEADER_LEN;

    // –ß–∏—Ç–∞–µ–º –∫–æ–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0x01 –¥–ª—è Configure-Request)
    let code = request[ppp_start];
    let id = request[ppp_start + 1];
    let length = u16::from_be_bytes([request[ppp_start + 2], request[ppp_start + 3]]) as usize;

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Configure-Request, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    if code != 0x01 {
        println!("‚ö†Ô∏è –≠—Ç–æ –Ω–µ Configure-Request (code = 0x{:02X})", code);
        return None;
    }

    let expected_total_len = ppp_start + length;
    if request.len() < expected_total_len {
        println!("‚ùå –ü–∞–∫–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–ø—Ü–∏–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ Length.");
        return None;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–ø—Ü–∏–∏) –∏–∑ –ø–∞–∫–µ—Ç–∞
    let options = &request[ppp_start + 4..expected_total_len];

    // –°—Ç—Ä–æ–∏–º Configure-Ack —Å —Ç–µ–º –∂–µ ID –∏ —Ç–µ–º–∏ –∂–µ –æ–ø—Ü–∏—è–º–∏
    let mut ppp = vec![
        0xFF, 0x03,       // Address + Control
        0xC0, 0x21,       // LCP Protocol
        0x02,             // Code = Configure-Ack
        id,               // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    let ack_length = (options.len() + 4) as u16;
    ppp.push((ack_length >> 8) as u8);  // –î–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞ (—Å—Ç–∞—Ä—à–∏–π –±–∞–π—Ç)
    ppp.push((ack_length & 0xFF) as u8);  // –î–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞ (–º–ª–∞–¥—à–∏–π –±–∞–π—Ç)
    ppp.extend_from_slice(options);

    // –°—Ç—Ä–æ–∏–º SSTP –ø–∞–∫–µ—Ç
    let total_len = ppp.len() + 4;  // –î–æ–±–∞–≤–ª—è–µ–º SSTP –∑–∞–≥–æ–ª–æ–≤–æ–∫
    let mut sstp = vec![
        0x10, 0x00, // –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è SSTP (data packet)
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];

    sstp.extend_from_slice(&ppp); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –ø–∞–∫–µ—Ç PPP

    Some(sstp)  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}

pub fn build_configure_nak_from_request(sstp_payload: &[u8]) -> Option<Vec<u8>> {
    const SSTP_HEADER_LEN: usize = 4;
    const PPP_HEADER_LEN: usize = 2 + 2; // Address/Control + Protocol
    const PPP_LCP_HEADER_LEN: usize = 4; // Code, ID, Length

    if sstp_payload.len() < SSTP_HEADER_LEN + PPP_HEADER_LEN + PPP_LCP_HEADER_LEN {
        println!("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π SSTP –ø–∞–∫–µ—Ç –¥–ª—è LCP (Configure-Nak).");
        return None;
    }

    let ppp_start = SSTP_HEADER_LEN + PPP_HEADER_LEN;

    let code = sstp_payload[ppp_start];
    let id = sstp_payload[ppp_start + 1];

    if code != 0x01 {
        println!("‚ö†Ô∏è –≠—Ç–æ –Ω–µ Configure-Request (–æ–∂–∏–¥–∞–ª—Å—è Code 0x01), –∞ 0x{:02X}", code);
        return None;
    }

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º CHAP: Protocol ID = 0xC223, Value = 0x81 (MS-CHAPv2)
    let chap_option: [u8; 5] = [
        0x03,       // Option Type: Authentication Protocol
        0x05,       // Length
        0xC2, 0x23, // CHAP (0xC223)
        0x81        // Algorithm = 0x81 (MS-CHAPv2)
    ];

    let mut ppp = vec![
        0xFF, 0x03,       // Address + Control
        0xC0, 0x21,       // LCP Protocol
        0x03,             // Code = Configure-Nak
        id,               // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID
    ];

    let length = (chap_option.len() + 4) as u16;
    ppp.push((length >> 8) as u8);
    ppp.push((length & 0xFF) as u8);
    ppp.extend_from_slice(&chap_option);

    let total_len = ppp.len() + 4;
    let mut sstp = vec![
        0x10, 0x00,
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];
    sstp.extend_from_slice(&ppp);

    Some(sstp)
}


pub fn is_lcp_configure_request(buf: &[u8]) -> bool {
    buf.len() >= 12 &&
    buf[4] == 0xFF &&
    buf[5] == 0x03 &&
    buf[6] == 0xC0 &&
    buf[7] == 0x21 &&
    buf[8] == 0x01
}

pub fn is_chap_challenge(buf: &[u8]) -> bool {
    buf.len() >= 12 &&
    buf[4] == 0xFF &&
    buf[5] == 0x03 &&
    buf[6] == 0xC2 &&
    buf[7] == 0x23 &&
    buf[8] == 0x01
}

pub fn build_lcp_configure_request_chap_simple() -> Vec<u8> {
    let options = vec![
        0x05, 0x04,       // Option Type = Auth Protocol (0x05), Length = 4
        0xC2, 0x23        // Value = CHAP
    ];

    let mut ppp = vec![
        0xFF, 0x03,
        0xC0, 0x21,
        0x01, // Code = Configure-Request
        0x02, // ID = 2
    ];

    let length = (options.len() + 4) as u16;
    ppp.push((length >> 8) as u8);
    ppp.push((length & 0xFF) as u8);
    ppp.extend_from_slice(&options);

    let total_len = ppp.len() + 4;
    let mut sstp = vec![
        0x10, 0x00,
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];
    sstp.extend_from_slice(&ppp);
    sstp
}

pub fn build_lcp_configure_ack(id: u8, payload: &[u8]) -> Vec<u8> {
    let length = (4 + payload.len()) as u16;
    let mut buf = Vec::new();
    buf.push(0x02); // Code: Configure-Ack
    buf.push(id);   // Identifier
    buf.extend_from_slice(&length.to_be_bytes()); // Length
    buf.extend_from_slice(payload); // Echo back the options exactly
    buf
}

/// –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç LCP payload –≤ PPP + SSTP Data –ø–∞–∫–µ—Ç
pub fn wrap_lcp_packet(code: u8, id: u8, payload: &[u8]) -> Vec<u8> {
    let mut ppp = Vec::new();

    // ===== PPP Header =====
    ppp.extend_from_slice(&[0xFF, 0x03]);       // Address + Control
    ppp.extend_from_slice(&[0xC0, 0x21]);       // Protocol: LCP (0xC021)

    // ===== LCP Frame =====
    let lcp_length = (4 + payload.len()) as u16;
    ppp.push(code);                             // LCP Code (e.g., 0x02 = Ack)
    ppp.push(id);                               // Identifier
    ppp.extend_from_slice(&lcp_length.to_be_bytes()); // Length
    ppp.extend_from_slice(payload);             // Options / payload

    // ===== SSTP Header =====
    let total_len = (ppp.len() + 4) as u16;     // PPP + SSTP header
    let mut sstp = Vec::new();
    sstp.push(0x10);                            // SSTP Version 1.0
    sstp.push(0x00);                            // C = 0 (Data)
    sstp.extend_from_slice(&total_len.to_be_bytes()); // Length
    sstp.extend_from_slice(&ppp);               // –í—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Å—å PPP-—Ñ—Ä–µ–π–º

    sstp
}

pub fn build_sstp_packet_from_ppp(code: u8, ppp: &PppParsedFrame) -> Vec<u8> {
    let mut ppp_frame = Vec::new();

    // PPP Header
    ppp_frame.extend_from_slice(&[0xFF, 0x03]);           // Address + Control
    ppp_frame.extend_from_slice(&ppp.protocol.to_be_bytes()); // e.g. 0xC021 for LCP

    // LCP –∏–ª–∏ –¥—Ä—É–≥–æ–π PPP —Ñ—Ä–µ–π–º
    let lcp_length = (4 + ppp.payload.len()) as u16;
    ppp_frame.push(code);                     // e.g. 0x02 = Configure-Ack
    ppp_frame.push(ppp.id);                   // —Ç–æ—Ç –∂–µ ID, —á—Ç–æ –∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
    ppp_frame.extend_from_slice(&lcp_length.to_be_bytes());
    ppp_frame.extend_from_slice(&ppp.payload); // –¢–æ–ª—å–∫–æ –æ–ø—Ü–∏–∏

    // SSTP Header
    let total_len = (4 + ppp_frame.len()) as u16;
    let mut sstp_packet = Vec::new();
    sstp_packet.push(0x10);                   // Version 1.0
    sstp_packet.push(0x00);                   // C = 0 (Data packet)
    sstp_packet.extend_from_slice(&total_len.to_be_bytes());
    sstp_packet.extend_from_slice(&ppp_frame);

    sstp_packet
}

pub fn build_pap_authenticate_request(id: u8, username: &str, password: &str) -> Vec<u8> {
    let user_bytes = username.as_bytes();
    let pass_bytes = password.as_bytes();

    let total_len = 4 + 1 + user_bytes.len() + 1 + pass_bytes.len();

    let mut buf = Vec::with_capacity(total_len);

    // PAP Header
    buf.push(0x01); // Code: Authenticate-Request
    buf.push(id);   // Identifier
    buf.extend_from_slice(&(total_len as u16).to_be_bytes()); // Length

    // Payload
    buf.push(user_bytes.len() as u8);
    buf.extend_from_slice(user_bytes);

    buf.push(pass_bytes.len() as u8);
    buf.extend_from_slice(pass_bytes);

    buf
}

pub fn wrap_ppp_pap_packet(id: u8, username: &str, password: &str) -> Vec<u8> {
    let pap_payload = build_pap_authenticate_request(id, username, password);

    let mut ppp = Vec::new();
    ppp.extend_from_slice(&[0xFF, 0x03]);           // PPP Header
    ppp.extend_from_slice(&[0xC0, 0x23]);           // Protocol: PAP (0xC023)
    ppp.extend_from_slice(&pap_payload);

    let total_len = (ppp.len() + 4) as u16;

    let mut sstp = Vec::new();
    sstp.push(0x10); // SSTP Version
    sstp.push(0x00); // Data Packet
    sstp.extend_from_slice(&total_len.to_be_bytes());
    sstp.extend_from_slice(&ppp);

    sstp
}

/// –°—Ç—Ä–æ–∏—Ç SSTP Data –ø–∞–∫–µ—Ç —Å PPP IPCP Configure-Request (IP Address = 0.0.0.0)
pub fn build_ipcp_configure_request_packet(id: u8) -> Vec<u8> {
    let mut ppp = Vec::new();

    // === PPP Header ===
    ppp.extend_from_slice(&[0xFF, 0x03]);       // Address + Control
    ppp.extend_from_slice(&[0x80, 0x21]);       // Protocol = IPCP (0x8021)

    // === IPCP Configure-Request ===
    let payload = [
        0x01,                   // Code = Configure-Request
        id,                    // Identifier
        0x00, 0x0A,             // Length = 10 bytes
        0x03, 0x06,             // Option: IP Address (type=3, len=6)
        0x00, 0x00, 0x00, 0x00,  // IP Address = 0.0.0.0 (–º—ã –ø—Ä–æ—Å–∏–º —É —Å–µ—Ä–≤–µ—Ä–∞)
    ];
    ppp.extend_from_slice(&payload);

    // === SSTP Header ===
    let total_len = (ppp.len() + 4) as u16;
    let mut sstp = Vec::new();
    sstp.push(0x10); // Version 1.0
    sstp.push(0x00); // C = 0 (Data)
    sstp.extend_from_slice(&total_len.to_be_bytes());
    sstp.extend_from_slice(&ppp);

    sstp
}

pub fn wrap_ipcp_packet(code: u8, id: u8, options: &[u8]) -> Vec<u8> {
    let mut ppp = Vec::new();

    // PPP Header
    ppp.extend_from_slice(&[0xFF, 0x03, 0x80, 0x21]); // Address + Control + Protocol

    // IPCP Header
    let length = (4 + options.len()) as u16;
    ppp.push(code);
    ppp.push(id);
    ppp.extend_from_slice(&length.to_be_bytes());
    ppp.extend_from_slice(options);

    // SSTP Header
    let total_len = (ppp.len() + 4) as u16;
    let mut sstp = vec![0x10, 0x00];
    sstp.extend_from_slice(&total_len.to_be_bytes());
    sstp.extend_from_slice(&ppp);

    sstp
}

pub fn build_ipcp_configure_ack(id: u8, ip: [u8; 4]) -> Vec<u8> {
    let option = [0x03, 0x06, ip[0], ip[1], ip[2], ip[3]];
    wrap_ipcp_packet(0x02, id, &option)
}

pub fn build_ipcp_configure_reject(id: u8, option: &[u8]) -> Vec<u8> {
    wrap_ipcp_packet(0x04, id, option)
}

pub fn build_ipcp_request_any_ip(id: u8) -> Vec<u8> {
    let options = [
        0x03, 0x06, 0x00, 0x00, 0x00, 0x00, // IP = 0.0.0.0
        0x81, 0x06, 0x00, 0x00, 0x00, 0x00, // DNS = 0.0.0.0
    ];
    wrap_ipcp_packet(0x01, id, &options)
}

pub fn build_ipcp_request_with(ip: [u8; 4], dns: [u8; 4], id: u8) -> Vec<u8> {
    let mut options = vec![
        0x03, 0x06, ip[0], ip[1], ip[2], ip[3],
        0x81, 0x06, dns[0], dns[1], dns[2], dns[3],
    ];
    wrap_ipcp_packet(0x01, id, &options)
}

pub fn build_ipcp_request_with_only_ip(ip: [u8; 4], id: u8) -> Vec<u8> {
    let mut options = vec![
        0x03, 0x06, ip[0], ip[1], ip[2], ip[3]
    ];
    wrap_ipcp_packet(0x01, id, &options)
}

pub fn build_sstp_echo_response() -> Vec<u8> {
    vec![
        0x10, 0x01,             // SSTP v1.0, Control packet
        0x00, 0x08,             // Length = 8
        0x00, 0x06,             // Message Type = 0x0006 (ECHO_RESPONSE)
        0x00, 0x00              // Attribute length = 0
    ]
}

pub async fn read_and_parse<R: AsyncReadExt + Unpin>(
    stream: &mut R,
    buf: &mut [u8],
) -> Option<PppParsedFrame> {
    match stream.read(buf).await {
        Ok(n) if n > 0 => {
            // ({} –±–∞–π—Ç): {:02X?}", n, &buf[..n]);
            parse_sstp_data_packet(&buf[..n])
        }
        Ok(_) => {
            println!("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
            None
        }
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {}", e);
            None
        }
    }
}

pub fn build_sstp_call_connected_packet() -> Vec<u8> {
    vec![
        0x10, 0x02, 0x00, 0x10, // SSTP Header: Version 1.0, Control, Length=16
        0x00, 0x02,             // Message Type: CALL_CONNECTED
        0x00, 0x00,             // Attributes Count = 0
        0x00, 0x00, 0x00, 0x00, // Reserved
        0x00, 0x00, 0x00, 0x00, // Reserved
    ]
}

pub fn extract_all_ipcp_options(payload: &[u8]) -> HashMap<u8, [u8; 4]> {
    let mut options = HashMap::new();
    let mut i = 0;

    while i + 2 <= payload.len() {
        let opt_type = payload[i];
        let len = payload[i + 1] as usize;

        if len < 2 || i + len > payload.len() {
            println!("‚ö†Ô∏è IPCP option –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã: type={}, len={}", opt_type, len);
            break;
        }

        if len == 6 {
            options.insert(
                opt_type,
                [
                    payload[i + 2],
                    payload[i + 3],
                    payload[i + 4],
                    payload[i + 5],
                ],
            );
        } else {
            println!("‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ–ø—Ü–∏—è –¥–ª–∏–Ω–æ–π {}, —Ç–∏–ø {}", len, opt_type);
        }

        i += len;
    }

    options
}

pub fn wrap_ip_in_ppp_sstp(ip_data: &[u8]) -> Vec<u8> {
    let n = ip_data.len();
    println!("SEND:\tWrite to SSTP: ({} –±–∞–π—Ç): {:02X?}", n, &ip_data[..n]);

    let mut ppp = vec![
        0xFF, 0x03, // Address + Control
        0x00, 0x21, // Protocol = IP
    ];
    ppp.extend_from_slice(ip_data);

    let total_len = (ppp.len() + 4) as u16;
    let mut sstp = vec![
        0x10, 0x00, // SSTP v1, C = 0 (Data)
        (total_len >> 8) as u8,
        (total_len & 0xFF) as u8,
    ];
    sstp.extend_from_slice(&ppp);
    sstp
}

pub fn parse_ppp_ip_packet(buf: &[u8]) -> Option<&[u8]> {
    let n = buf.len();
    //println!("[SSTP->>TUN] ({} –±–∞–π—Ç): {:02X?}", n, &buf[..n]);

    if buf.len() < 8 {
        return None;
    }

    if buf[4] == 0xFF && buf[5] == 0x03 &&
       buf[6] == 0x00 && buf[7] == 0x21 {
        // –≠—Ç–æ PPP + IP
        Some(&buf[8..])
    } else {
        None
    }
}
pub fn extract_all_lcp_option_types(payload: &[u8]) -> Vec<u8> {
    let mut i = 0;
    let mut types = Vec::new();
    while i + 2 <= payload.len() {
        let opt_type = payload[i];
        let opt_len = payload[i + 1] as usize;

        if opt_len < 2 || i + opt_len > payload.len() {
            break;
        }

        types.push(opt_type);
        i += opt_len;
    }
    types
}
pub fn build_lcp_configure_request_filtered(id: u8, reject_list: &[u8]) -> Vec<u8> {
    let mut payload = Vec::new();

    // Option 1: MRU
    if !reject_list.contains(&0x01) {
        payload.extend_from_slice(&[0x01, 0x04, 0x05, 0xDC]); // 1500
    }

    // Option 5: Magic Number
    if !reject_list.contains(&0x05) {
        payload.extend_from_slice(&[0x05, 0x04, 0x7B, 0xA7]); // any 2 bytes
    }

    // Option 7 and 8 ‚Äî —á–∞—Å—Ç–æ –æ—Ç–≤–µ—Ä–≥–∞—é—Ç—Å—è, –º–æ–∂–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å
    // Option 3: Authentication Protocol
    if !reject_list.contains(&0x03) {
        payload.extend_from_slice(&[0x03, 0x04, 0xC0, 0x23]); // PAP
    }

    wrap_lcp_packet(0x01, id, &payload)
}


pub fn remove_rejected_lcp_options(payload: &[u8], rejected: &[u8]) -> Vec<u8> {
    let mut result = Vec::new();
    let mut i = 0;

    while i + 2 <= payload.len() {
        let typ = payload[i];
        let len = payload[i + 1] as usize;

        if len < 2 || i + len > payload.len() {
            break;
        }

        if !rejected.contains(&typ) {
            result.extend_from_slice(&payload[i..i + len]);
        }

        i += len;
    }

    result
}

/// –°–æ–±–∏—Ä–∞–µ—Ç LCP Configure-Request + –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ options
pub fn build_sstp_ppp_lcp_request_with_options(id: u8) -> (Vec<u8>, Vec<u8>) {
    let mut opts = Vec::new();
    let mut rng = rand::thread_rng();
    let magic = rng.gen::<u32>().to_be_bytes();
    opts.push(0x07); opts.push(2);              // ACCM (–ø—É—Å—Ç–∞—è)
    opts.push(0x05); opts.push(6); opts.extend_from_slice(&magic);
    opts.push(0x08); opts.push(2);              // Auth callback
    opts.push(0x01); opts.push(4); opts.extend_from_slice(&[0x0F, 0xFB]);

    // === –°–±–æ—Ä–∫–∞ PPP + LCP ===
    let lcp_len = (4 + opts.len()) as u16;

    let mut ppp = Vec::new();
    ppp.extend_from_slice(&[0xFF, 0x03]); // PPP Address/Control
    ppp.extend_from_slice(&[0xC0, 0x21]); // PPP Protocol: LCP

    ppp.push(0x01);             // LCP Code: Configure-Request
    ppp.push(id);               // Identifier
    ppp.extend_from_slice(&lcp_len.to_be_bytes());
    ppp.extend_from_slice(&opts);

    // === SSTP Header ===
    let total_len = (ppp.len() + 4) as u16;

    let mut sstp = Vec::new();
    sstp.push(0x10); // SSTP Version
    sstp.push(0x00); // C = 0
    sstp.extend_from_slice(&total_len.to_be_bytes());
    sstp.extend_from_slice(&ppp);

    (sstp, opts)
}

pub fn build_lcp_configure_request_filtered_with_mru(
    id: u8,
    mru: [u8; 2],
) -> (Vec<u8>, Vec<u8>) {
    let mut options = Vec::new();

    // Option 1: MRU
    options.extend_from_slice(&[0x01, 0x04, mru[0], mru[1]]);

    let payload = options.clone(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ —É–ø–∞–∫–æ–≤–∫–∏

    let packet = wrap_lcp_packet(0x01, id, &options); // 0x01 = Configure-Request

    (packet, payload)
}

