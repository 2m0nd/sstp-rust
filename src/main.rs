mod sstp;
mod parser;
mod ssl_verifiers;
use sstp::{
    wrap_lcp_packet,
    build_lcp_configure_ack,
    is_chap_challenge,
    is_lcp_configure_request,
    build_sstp_hello,
    parse_sstp_control_packet,
    parse_sstp_data_packet,
    build_lcp_configure_request,
    build_sstp_ppp_lcp_request,
    build_configure_ack_from_request,
    build_configure_nak_from_request,
    build_lcp_configure_request_fallback,
    build_lcp_configure_request_chap_simple,
    build_configure_ack
};
use ssl_verifiers::DisabledVerifier;
use uuid::Uuid;
use tokio::time::{sleep, Duration};

use std::net::IpAddr;
use std::sync::Arc;
use tokio::{net::TcpStream, io::{AsyncReadExt, AsyncWriteExt}};
use tokio_rustls::TlsConnector;
use tokio_rustls::rustls::{
    Certificate, ClientConfig, Error as TLSError, ServerName,
    client::ServerCertVerifier,
    client::ServerCertVerified,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let server_ip = "SSTP_SERVER_IP_ADDRESS";
    let addr = format!("{server_ip}:443");
    let server_domain_name = "DNS_NAME_SSTP_SERVER";
    let _server_name = ServerName::try_from(server_domain_name)?;

    let domain = ServerName::IpAddress(server_ip.parse::<IpAddr>()?);

    let config = ClientConfig::builder()
        .with_safe_defaults()
        .with_custom_certificate_verifier(Arc::new(DisabledVerifier))
        .with_no_client_auth();

    let connector = TlsConnector::from(Arc::new(config));
    let tcp = TcpStream::connect(&addr).await?;
    let mut stream = connector.connect(domain, tcp).await?;

    println!("‚úÖ TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    let correlation_id = Uuid::new_v4();
    let correlation_id_str = format!("{}", correlation_id).to_uppercase();
    let http_request = format!(
        "SSTP_DUPLEX_POST /sra_{{BA195980-CD49-458b-9E23-C84EE0ADCD75}}/ HTTP/1.1\r\n\
        Host: {host}\r\n\
        Content-Length: 18446744073709551615\r\n\
        SSTPCORRELATIONID: {{{corr_id}}}\r\n\
        \r\n",
        host = server_ip,
        corr_id = correlation_id_str
    );

    stream.write_all(http_request.as_bytes()).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP HTTP POST");
    println!("üì• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n{}", http_request);

    let mut buf = vec![0u8; 4096];
    let n = stream.read(&mut buf).await?;
    let response = String::from_utf8_lossy(&buf[..n]);
    println!("üì• HTTP –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{}", response);

    if !response.contains("200 OK") {
        println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ SSTP INIT: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª 200 OK");
        return Ok(());
    }

    let hello = sstp::build_sstp_hello(correlation_id);
    println!("üìè Hello –¥–ª–∏–Ω–∞: {} –±–∞–π—Ç", hello.len());
    stream.write_all(&hello).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP Hello");

    let n = stream.read(&mut buf).await?;
    println!("üì• –û—Ç–≤–µ—Ç –Ω–∞ Hello ({} –±–∞–π—Ç): {:02X?}", n, &buf[..n]);


    let lcp_request = build_sstp_ppp_lcp_request();

    stream.write_all(&lcp_request).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω LCP Configure-Request ({} –±–∞–π—Ç): {:02X?}", lcp_request.len(), &lcp_request);

    let mut counter = 0;
    //—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ ppp
    loop {
        counter += 1;
        println!("üì° –ñ–¥—ë–º –ø–∞–∫–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...");
        let n = stream.read(&mut buf).await?;
        println!("[{}] üì• –ü–æ–ª—É—á–µ–Ω–æ ({} –±–∞–π—Ç): {:02X?}", counter, n, &buf[..n]);

        if let Some(ppp) = parse_sstp_data_packet(&buf[..n]) {
            if ppp.protocol == 0xC021 && ppp.code == 0x01 {
                println!("üîß –ü–æ–ª—É—á–µ–Ω LCP Configure-Request –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (ID = {})", ppp.id);

                // üëâ –§–æ—Ä–º–∏—Ä—É–µ–º Configure-Ack —Å —Ç–µ–º–∏ –∂–µ –æ–ø—Ü–∏—è–º–∏, —á—Ç–æ –ø—Ä–∏—à–ª–∏
                let ack = build_lcp_configure_ack(ppp.id, &ppp.payload);

                // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ PPP + SSTP –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                let packet = wrap_lcp_packet(0x02, ppp.id, &ack); // Code 0x02 = Configure-Ack
                stream.write_all(&packet).await?;
                println!("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω Configure-Ack –Ω–∞ LCP ({} –±–∞–π—Ç): {:02X?}", 
                        packet.len(), &packet[..packet.len()]);
            }
        }
    }



    Ok(())
}