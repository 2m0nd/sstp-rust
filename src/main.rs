mod sstp;
mod ssl_verifiers;
use sstp::{
    is_chap_challenge,
    is_lcp_configure_request,
    build_sstp_hello, 
    parse_sstp_control_packet, 
    parse_sstp_data_packet,
    build_lcp_configure_request,
    build_configure_ack_from_request,
    build_configure_ack};
use ssl_verifiers::DisabledVerifier;
use uuid::Uuid;
use tokio::time::{sleep, Duration};

use std::net::IpAddr;
use std::sync::Arc;
use tokio::{net::TcpStream, io::{AsyncReadExt, AsyncWriteExt}};
use tokio_rustls::TlsConnector;
use tokio_rustls::rustls::{
    Certificate, ClientConfig, Error as TLSError, ServerName,
    client::ServerCertVerifier,
    client::ServerCertVerified,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let server_ip = "SSTP_SERVER_IP_ADDRESS";
    let addr = format!("{server_ip}:443");
    let serverDomainName = "DNS_NAME_SSTP_SERVER";
    let serverName = ServerName::try_from(serverDomainName)?;

    // ‚ö†Ô∏è –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º IP, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å SNI
    let domain = ServerName::IpAddress(server_ip.parse::<IpAddr>()?);

    // TLS –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    let config = ClientConfig::builder()
        .with_safe_defaults()
        .with_custom_certificate_verifier(Arc::new(DisabledVerifier))
        .with_no_client_auth();

    let connector = TlsConnector::from(Arc::new(config));
    let tcp = TcpStream::connect(&addr).await?;
    let mut stream = connector.connect(domain, tcp).await?;

    println!("‚úÖ TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // === 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSTP INIT HTTP-–∑–∞–ø—Ä–æ—Å ===
    let correlation_id = Uuid::new_v4();
    let correlation_id_str = format!("{}", correlation_id).to_uppercase();
    let http_request = format!("\
        SSTP_DUPLEX_POST /sra_{{BA195980-CD49-458b-9E23-C84EE0ADCD75}}/ HTTP/1.1\r\n\
        Host: {host}\r\n\
        Content-Length: 18446744073709551615\r\n\
        SSTPCORRELATIONID: {{{corr_id}}}\r\n\
        \r\n",
                host = server_ip,
                corr_id = correlation_id_str
            );

    stream.write_all(http_request.as_bytes()).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP HTTP POST");
    println!("üì• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n{}", http_request);

    // === 2. –ß–∏—Ç–∞–µ–º HTTP-–æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ===
    let mut buf = vec![0u8; 4096];
    let n = stream.read(&mut buf).await?;
    let response = String::from_utf8_lossy(&buf[..n]);
    println!("üì• HTTP –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{}", response);

    if !response.contains("200 OK") {
        println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ SSTP INIT: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª 200 OK");
        return Ok(());
    }

    // //–ø–æ–¥–æ–∂–¥–µ–º –ø–µ—Ä–µ–¥ hello
    // tokio::time::sleep(Duration::from_millis(2000)).await;

    // === 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSTP Hello ===
    let hello = sstp::build_sstp_hello(correlation_id);
    println!("üìè Hello –¥–ª–∏–Ω–∞: {} –±–∞–π—Ç", hello.len());
    stream.write_all(&hello).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP Hello");

    // //–ø–æ–¥–æ–∂–¥–µ–º –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
    // tokio::time::sleep(Duration::from_millis(2000)).await;

    // === 4. –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (SSTP Connect Ack –∏–ª–∏ NAK) ===
    let n = stream.read(&mut buf).await?;
    println!("üì• –û—Ç–≤–µ—Ç –Ω–∞ Hello ({} –±–∞–π—Ç): {:02X?}", n, &buf[..n]);
    parse_sstp_control_packet(&buf[..n]);

    sleep(Duration::from_millis(5000)).await;
    let lcp_packet = build_lcp_configure_request();
    stream.write_all(&lcp_packet).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω LCP Configure-Request, ({} –±–∞–π—Ç): {:02X?}", lcp_packet.len(), &lcp_packet);

    let n = stream.read(&mut buf).await?;
    parse_sstp_control_packet(&buf[..n]);
    
    // //set config
    // loop {
    //     let n = stream.read(&mut buf).await?;
    //     println!("üì• –ü–æ–ª—É—á–µ–Ω–æ ({} –±–∞–π—Ç)", n);

    //     if n >= 6 && buf[0] == 0x10 && buf[1] == 0x01 {
    //         // SSTP Control Packet
    //         let msg_type = u16::from_be_bytes([buf[4], buf[5]]);
    //         match msg_type {
    //             0x0003 => println!("üéâ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–µ–Ω Call Connected ‚Äî –≤—Å—ë –µ—â—ë –≤ PPP —Ä–µ–∂–∏–º–µ"),
    //             0x0005 => {
    //                 println!("‚õî –ü–æ–ª—É—á–µ–Ω Call Disconnect ‚Äî —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
    //                 break;
    //             }
    //             _ => println!("üì° –ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π SSTP Control: 0x{:04X}", msg_type),
    //         }
    //     }

    //     // –û–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ —ç—Ç–æ
    //     if is_lcp_configure_request(&buf[..n]) {
    //         println!("üîÅ –ü–æ–ª—É—á–µ–Ω Configure-Request –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
    //         if let Some(ack) = build_configure_ack_from_request(&buf[..n]) {
    //             stream.write_all(&ack).await?;
    //             println!("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω Configure-Ack");
    //         }
    //     } else if is_chap_challenge(&buf[..n]) {
    //         println!("üõÇ –ü–æ–ª—É—á–µ–Ω CHAP Challenge!");
    //         // —Ç—É—Ç break –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ CHAP
    //         break;
    //     } else {
    //         println!("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å");
    //     }
    // }

    Ok(())
}