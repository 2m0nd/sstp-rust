use tokio::{net::TcpStream, io::{AsyncReadExt, AsyncWriteExt}};
use tokio_rustls::{
    rustls::{
        Certificate, ClientConfig, Error as TLSError, ServerName, SignatureScheme,
        ServerCertVerifier, ServerCertVerified, HandshakeSignatureValid,
        DigitallySignedStruct,
    },
    TlsConnector,
};
use std::{sync::Arc, time::SystemTime};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // IP –∏–ª–∏ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è SSTP-—Å–µ—Ä–≤–µ—Ä–∞
    let server_host = "SSTP_SERVER_IP_ADDRESS";
    let addr = format!("{}:443", server_host);
    let domain = ServerName::try_from(server_host)?; // –¥–ª—è SNI

    // TLS: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–ù–ï –î–ï–õ–ê–¢–¨ –í –ë–û–ï–í–û–ô –°–ï–¢–ò!)
    let config = ClientConfig::builder()
        .with_safe_defaults()
        .with_custom_certificate_verifier(Arc::new(NoCertificateVerification))
        .with_no_client_auth();

    let connector = TlsConnector::from(Arc::new(config));
    let tcp_stream = TcpStream::connect(addr).await?;
    let mut tls_stream = connector.connect(domain, tcp_stream).await?;

    println!("üîê TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");

    // –ó–∞–≥–ª—É—à–∫–∞ SSTP Hello (—Ñ–æ—Ä–º–∞—Ç –ø–∞–∫–µ—Ç–∞ —É–ø—Ä–æ—â—ë–Ω)
    let sstp_hello = vec![
        0x10, 0x01, // Control Packet (SSTP)
        0x00, 0x10, // –î–ª–∏–Ω–∞ (16 –±–∞–π—Ç)
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—è AVP, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω—ã
    ];
    tls_stream.write_all(&sstp_hello).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP Hello (–∑–∞–≥–ª—É—à–∫–∞)");

    // –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    let mut buf = [0u8; 4096];
    let n = tls_stream.read(&mut buf).await?;
    println!("üì• –ü–æ–ª—É—á–µ–Ω–æ {} –±–∞–π—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", n);
    println!("{:02X?}", &buf[..n]);

    Ok(())
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
struct NoCertificateVerification;

impl ServerCertVerifier for NoCertificateVerification {
    fn verify_server_cert(
        &self,
        _end_entity: &Certificate,
        _intermediates: &[Certificate],
        _server_name: &ServerName,
        _scts: &mut dyn Iterator<Item = &[u8]>,
        _ocsp_response: &[u8],
        _now: SystemTime,
    ) -> Result<ServerCertVerified, TLSError> {
        Ok(ServerCertVerified::assertion())
    }

    fn verify_tls12_signature(
        &self,
        _message: &[u8],
        _cert: &Certificate,
        _dss: &DigitallySignedStruct,
    ) -> Result<HandshakeSignatureValid, TLSError> {
        Ok(HandshakeSignatureValid::assertion())
    }

    fn verify_tls13_signature(
        &self,
        _message: &[u8],
        _cert: &Certificate,
        _signature: &[u8],
        _scheme: SignatureScheme,
    ) -> Result<HandshakeSignatureValid, TLSError> {
        Ok(HandshakeSignatureValid::assertion())
    }
}
