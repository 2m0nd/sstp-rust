mod sstp;
mod parser;
mod ssl_verifiers;
use crate::sstp::*;
use crate::parser::*;
use ssl_verifiers::DisabledVerifier;
use uuid::Uuid;
use tokio::time::{sleep, Duration};

use std::net::IpAddr;
use std::sync::Arc;
use tokio::{net::TcpStream, io::{AsyncReadExt, AsyncWriteExt}};
use tokio_rustls::TlsConnector;
use tokio_rustls::rustls::{
    Certificate, ClientConfig, Error as TLSError, ServerName,
    client::ServerCertVerifier,
    client::ServerCertVerified,
};

#[derive(Debug)]
enum PppState {
    SendLcpRequest,
    WaitLcpRequest,
    SendLcpAck,
    SendPapAuth,
    WaitPapAck,
    SendIpcpRequest,
    WaitIpcpRequest,
    SendIpcpAck,
    Done,
    WaitIpcpResponse,
    SendIpcpCustomRequest,
    WaitIpcpNakWithOffer,
    WaitIpcpFinalAck,
    Error(String),
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let user = "AHC\\test_user_client";
    let pwd = "EXAPLME_PWD";
    let server_ip = "SSTP_SERVER_IP_ADDRESS";
    let addr = format!("{server_ip}:443");
    let server_domain_name = "DNS_NAME_SSTP_SERVER";
    let _server_name = ServerName::try_from(server_domain_name)?;

    let domain = ServerName::IpAddress(server_ip.parse::<IpAddr>()?);

    let config = ClientConfig::builder()
        .with_safe_defaults()
        .with_custom_certificate_verifier(Arc::new(DisabledVerifier))
        .with_no_client_auth();

    let connector = TlsConnector::from(Arc::new(config));
    let tcp = TcpStream::connect(&addr).await?;
    let mut stream = connector.connect(domain, tcp).await?;

    println!("‚úÖ TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    let correlation_id = Uuid::new_v4();
    let correlation_id_str = format!("{}", correlation_id).to_uppercase();
    let http_request = format!(
        "SSTP_DUPLEX_POST /sra_{{BA195980-CD49-458b-9E23-C84EE0ADCD75}}/ HTTP/1.1\r\n\
        Host: {host}\r\n\
        Content-Length: 18446744073709551615\r\n\
        SSTPCORRELATIONID: {{{corr_id}}}\r\n\
        \r\n",
        host = server_ip,
        corr_id = correlation_id_str
    );

    stream.write_all(http_request.as_bytes()).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP HTTP POST");
    println!("üì• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n{}", http_request);

    let mut buf = vec![0u8; 4096];
    let n = stream.read(&mut buf).await?;
    let response = String::from_utf8_lossy(&buf[..n]);
    println!("üì• HTTP –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{}", response);

    if !response.contains("200 OK") {
        println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ SSTP INIT: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª 200 OK");
        return Ok(());
    }

    let hello = sstp::build_sstp_hello(correlation_id);
    println!("üìè Hello –¥–ª–∏–Ω–∞: {} –±–∞–π—Ç", hello.len());
    stream.write_all(&hello).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP Hello");

    let n = stream.read(&mut buf).await?;
    println!("üì• –û—Ç–≤–µ—Ç –Ω–∞ Hello ({} –±–∞–π—Ç): {:02X?}", n, &buf[..n]);

    let mut buf = [0u8; 1500];
    let mut state = PppState::SendLcpRequest;
    let mut id_counter: u8 = 1;

    loop {
        let ppp = match state {
            PppState::WaitIpcpNakWithOffer |
            PppState::WaitLcpRequest |
            PppState::WaitPapAck |
            PppState::WaitIpcpFinalAck |
            PppState::WaitIpcpRequest => {
                println!("üì° –û–∂–∏–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞...");
                match read_and_parse(&mut stream, &mut buf).await {
                    Some(ppp) => Some(ppp),
                    None => {
                        eprintln!("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞–∫–µ—Ç–∞");
                        state = PppState::Error("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è".into());
                        None
                    }
                }
            }
            _ => None,
        };

        match state {
            
            PppState::SendLcpAck |
            PppState::WaitIpcpResponse |
             PppState::SendIpcpAck => {
                eprintln!("‚ö†Ô∏è –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {:?}", state);
                state = PppState::Error("–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ".into());
            }
            
            PppState::SendLcpRequest => {
                let packet = build_sstp_ppp_lcp_request();
                stream.write_all(&packet).await?;
                println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω LCP Configure-Request");
                state = PppState::WaitLcpRequest;
            }

            PppState::WaitLcpRequest => {
                let ppp = ppp.unwrap(); // –±–µ–∑–æ–ø–∞—Å–Ω–æ, –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
                if ppp.protocol == 0xC021 && ppp.code == 0x01 {
                    let ack = build_sstp_packet_from_ppp(0x02, &ppp);
                    stream.write_all(&ack).await?;
                    state = PppState::SendPapAuth;
                } else {
                    state = PppState::Error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π LCP".into());
                }
            }

            PppState::SendPapAuth => {
                let auth = wrap_ppp_pap_packet(id_counter, user, pwd);
                stream.write_all(&auth).await?;
                id_counter += 1;
                state = PppState::WaitPapAck;
            }

            PppState::WaitPapAck => {
                let ppp = ppp.unwrap();
                if ppp.protocol == 0xC023 && ppp.code == 0x02 {
                    println!("‚úÖ PAP Authenticate-Ack");
                    
                    // üí¨ –í—Å—Ç–∞–≤–ª—è–µ–º CALL_CONNECTED
                    let packet = build_sstp_call_connected_packet();
                    stream.write_all(&packet).await?;
                    println!("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP CALL_CONNECTED");
                    
                    state = PppState::SendIpcpRequest;
                } else {
                    state = PppState::Error("–û–∂–∏–¥–∞–ª—Å—è PAP Ack".into());
                }
            }

            PppState::SendIpcpRequest => {
                let ipcp = build_ipcp_configure_request_packet(id_counter);
                stream.write_all(&ipcp).await?;
                id_counter += 1;
                state = PppState::WaitIpcpRequest;
            }

            PppState::WaitIpcpRequest => {
                let ppp = ppp.unwrap();
                if ppp.protocol == 0x8021 && ppp.code == 0x01 {
                    println!("üì• IPCP Configure-Request: ID={}, len={}", ppp.id, ppp.length);
            
                    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å IP –∏–∑ Option 3
                if let Some(ip) = extract_option_value(&ppp.payload, 0x03) {
                    println!("üì¶ –°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç IP: {}.{}.{}.{}", ip[0], ip[1], ip[2], ip[3]);
                    println!("‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º IP, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Configure-Ack");
                    let ack = build_ipcp_configure_ack(ppp.id, ip);
                    stream.write_all(&ack).await?;
                    state = PppState::WaitIpcpNakWithOffer;
                } else {
                    println!("‚ö†Ô∏è –ù–µ—Ç –æ–ø—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–∞ –≤ Configure-Request ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
                    state = PppState::Error("IPCP Configure-Request –±–µ–∑ IP-–æ–ø—Ü–∏–∏".into());
                }
                    
                } else {
                    state = PppState::Error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π IPCP –ø–∞–∫–µ—Ç".into());
                }
            }

            PppState::WaitIpcpNakWithOffer => {
                let ppp = ppp.unwrap();
            
                if ppp.protocol == 0x8021 && ppp.code == 0x03 {
                    println!("üì• –ü–æ–ª—É—á–µ–Ω IPCP Configure-Nak (ID = {})", ppp.id);
            
                    for (k, v) in extract_all_ipcp_options(&ppp.payload) {
                        println!("üîß option {} ‚Üí {}.{}.{}.{}", k, v[0], v[1], v[2], v[3]);
                    }

                    let ip = extract_option_value(&ppp.payload, 0x03).unwrap_or([0, 0, 0, 0]);
                    let dns = extract_option_value(&ppp.payload, 0x81).unwrap_or([0, 0, 0, 0]);
            
                    println!("üì¶ IP  = {}.{}.{}.{}", ip[0], ip[1], ip[2], ip[3]);
                    println!("üì¶ DNS = {}.{}.{}.{}", dns[0], dns[1], dns[2], dns[3]);
            
                    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π Configure-Request —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    let req = build_ipcp_request_with_only_ip(ip, id_counter);
                    println!("id {} nak request only ip again ({} –±–∞–π—Ç): {:02X?}", id_counter, req.len(), &req[..req.len()]);
                    stream.write_all(&req).await?;
                    id_counter += 1;                
                    state = PppState::WaitIpcpFinalAck;
                } else {
                    state = PppState::Error("‚ùå –û–∂–∏–¥–∞–ª—Å—è IPCP Nak —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º IP".into());
                }
            }

            PppState::SendIpcpCustomRequest => {
                let ppp = ppp.unwrap();
                println!("üì§ –®–ª—ë–º —Å–≤–æ–π IPCP Configure-Request (0.0.0.0 + DNS)");            
                let req = build_ipcp_request_any_ip(ppp.id);
                stream.write_all(&req).await?;
                state = PppState::WaitIpcpResponse;
            }

            PppState::WaitIpcpFinalAck => {
                let ppp = ppp.unwrap();
            
                if ppp.protocol == 0x8021 && ppp.code == 0x02 {
                    println!("üéâ IPCP Configure-Ack, IP —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω!");
                    state = PppState::Done;
                } else {
                    state = PppState::Error("‚ùå –û–∂–∏–¥–∞–ª—Å—è IPCP Ack".into());
                }
            }

            PppState::Done => {
                println!("üéâ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
                break;
            }

            PppState::Error(e) => {
                eprintln!("‚ùå –û—à–∏–±–∫–∞: {}", e);
                break;
            }
        }

        println!("____________");
    }




    Ok(())
}