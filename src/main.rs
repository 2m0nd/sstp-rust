mod sstp;
mod ssl_verifiers;
use sstp::build_sstp_hello;
use ssl_verifiers::DisabledVerifier;
use uuid::Uuid;

use std::net::IpAddr;
use std::sync::Arc;
use tokio::{net::TcpStream, io::{AsyncReadExt, AsyncWriteExt}};
use tokio_rustls::TlsConnector;
use tokio_rustls::rustls::{
    Certificate, ClientConfig, Error as TLSError, ServerName,
    client::ServerCertVerifier,
    client::ServerCertVerified,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let server_ip = "SSTP_SERVER_IP_ADDRESS";
    let addr = format!("{server_ip}:443");
    
    let domainName = ServerName::try_from("DNS_NAME_SSTP_SERVER")?;

    // ‚ö†Ô∏è –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º IP, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å SNI
    let domain = ServerName::IpAddress(server_ip.parse::<IpAddr>()?);

    // TLS –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    let config = ClientConfig::builder()
        .with_safe_defaults()
        .with_custom_certificate_verifier(Arc::new(DisabledVerifier))
        .with_no_client_auth();

    let connector = TlsConnector::from(Arc::new(config));
    let tcp = TcpStream::connect(&addr).await?;
    let mut stream = connector.connect(domain, tcp).await?;

    println!("‚úÖ TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // === 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSTP INIT HTTP-–∑–∞–ø—Ä–æ—Å ===
    let correlation_id = Uuid::new_v4();
    let http_request = format!(
        "SSTP_DUPLEX_POST /sra_{{BA195980-CD49-458b-9E23-C84EE0ADCD75}}/ HTTP/1.1\r\n
SSTPCORRELATIONID: {{{corr_id}}}\r\n\
Content-Length: 18446744073709551615\r\n\
\r\n",
        corr_id = correlation_id
    );

    stream.write_all(http_request.as_bytes()).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP HTTP POST");
    println!("üì• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n{}", http_request);

    // === 2. –ß–∏—Ç–∞–µ–º HTTP-–æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ===
    let mut buf = vec![0u8; 4096];
    let n = stream.read(&mut buf).await?;
    let response = String::from_utf8_lossy(&buf[..n]);
    println!("üì• HTTP –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{}", response);

    if !response.contains("200 OK") {
        println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ SSTP INIT: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª 200 OK");
        return Ok(());
    }

    // === 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSTP Hello ===
    let hello = sstp::build_sstp_hello();
    stream.write_all(&hello).await?;
    println!("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SSTP Hello");

    // === 4. –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (SSTP Connect Ack –∏–ª–∏ NAK) ===
    let n = stream.read(&mut buf).await?;
    println!("üì• –û—Ç–≤–µ—Ç –Ω–∞ Hello ({} –±–∞–π—Ç): {:02X?}", n, &buf[..n]);

    Ok(())
}